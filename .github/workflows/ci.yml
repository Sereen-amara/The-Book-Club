name: CI

on:
  pull_request:
  push:
    branches: [main]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Ruby and Gems
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Debug Ruby Installation
        run: |
          echo "Checking Ruby version"
          ruby --version
          echo "Checking Ruby path"
          which ruby

      - name: Generate Binstubs
        run: bundle binstubs bundler-audit brakeman rubocop

      - name: Security Audit Dependencies
        run: bundle exec bundle audit --update

      - name: Security Audit Application Code
        run: bundle exec brakeman -q -w2

      - name: Lint Ruby Files
        run: bundle exec rubocop --auto-correct-all --disable-uncorrectable

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Ruby and Gems
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Debug Ruby Installation
        run: |
          echo "Checking Ruby version"
          ruby --version
          echo "Checking Ruby path"
          which ruby

      - name: Generate Binstubs
        run: bundle binstubs bundler-audit brakeman rubocop

      - name: Install Additional Packages
        run: sudo apt-get update && sudo apt-get install --no-install-recommends -y build-essential git pkg-config google-chrome-stable

      - name: Debug Environment
        run: |
          env
          ls -la /usr/bin
          echo "Current PATH: $PATH"

      - name: Run Tests
        env:
          RAILS_ENV: test
        run: |
          bundle exec rails db:create db:schema:load
          bundle exec rails test

  scan_ruby:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Ruby and Gems
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Debug Ruby Installation
        run: |
          echo "Checking Ruby version"
          ruby --version
          echo "Checking Ruby path"
          which ruby

      - name: Generate Binstubs
        run: bundle binstubs brakeman

      - name: Security Scan
        run: bundle exec brakeman --no-pager

  scan_js:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Ruby and Gems
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Scan for security vulnerabilities in JavaScript dependencies
        run: bundle exec ruby bin/importmap audit

  deploy:
    runs-on: ubuntu-latest
    needs: [ lint, test, scan_ruby, scan_js ] # Ensure deploy runs after other jobs
    steps:
      - name: Save SSH Key
        run: |
          echo "$EC2_SSH_KEY" > mykey.pem
          chmod 600 mykey.pem

      - name: Deploy via SSH
        env:
          DB_HOST: localhost
          DB_USER: my_db_user
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: myapp_production
          EC2_SSH_KEY: ${{ secrets.SSH_KEY }}
        run: |
          ssh -i mykey.pem -o StrictHostKeyChecking=no ubuntu@18.205.155.52 << 'EOF'
            set -e
            cd /var/www/bookClub
            git pull origin main
            export DB_HOST=${DB_HOST}
            export DB_USER=${DB_USER}
            export DB_PASSWORD=${DB_PASSWORD}
            export DB_NAME=${DB_NAME}
            bundle config set path 'vendor/bundle'
            bundle config set clean true
            bundle config set deployment true
            bundle install
            RAILS_ENV=production bundle exec rails db:create || true
            RAILS_ENV=production bundle exec rails db:migrate
            RAILS_ENV=production bundle exec rails assets:precompile
            sudo systemctl restart nginx
            sudo systemctl restart puma
          EOF
